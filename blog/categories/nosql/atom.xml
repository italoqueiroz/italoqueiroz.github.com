<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: NoSQL | Italo Queiroz]]></title>
  <link href="http://italoqueiroz.github.com/blog/categories/nosql/atom.xml" rel="self"/>
  <link href="http://italoqueiroz.github.com/"/>
  <updated>2014-05-26T12:42:07-03:00</updated>
  <id>http://italoqueiroz.github.com/</id>
  <author>
    <name><![CDATA[Italo Queiroz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mongo, Mongol, Mongolão]]></title>
    <link href="http://italoqueiroz.github.com/blog/2014/05/21/mongo/"/>
    <updated>2014-05-21T20:01:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2014/05/21/mongo</id>
    <content type="html"><![CDATA[<h3>O que é esse MongoDB?</h3>

<center>
<iframe style="align:center" src="https://giphy.com/embed/7B6hvCLsQQBPO" width="500" height="230" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</center>


<p>É um banco de dados orientado a documentos, classificado como NoSQL e foi escrito em C++.</p>

<p>Ok!? Mas o que é um banco de dados orientado a documentos? É uma estrutura que tenta fugir do modelo relacional (MySQL, Postgress, Oracle) que durante muito tempo foi utilizado como bala de prata. Creio que o grande aumento das startups e suas constantes mudanças em seus produtos (App's) fez com que essa estrutura relacional fosse deixada de lado e a opção por um modelo mais adaptável e flexivél colocada em pauta. :D</p>

<p>O MongoDB possui <strong>Collections</strong> que no modelo relacional seriam as <strong>Tabelas</strong>, possui <strong>Documents</strong> que no modelo relacional seriam as <strong>Row</strong>. Mas a grande diferença entre estes modelos é que a Collection não influencia em nada na estrutura de seus Documents.</p>

<p>Ex:
Se você tivesse uma gaveta com o nome "Gaveta de contratos" nela teriamos apenas contratos guardados, pois você definiu um padrão para aquela gaveta e se assemelha com o modelo relacional. Agora pensando no modelo orientado a documentos nós teriamos uma "Gaveta" e dentro dela poderiamos guardar contratos, donuts, remédios e revólver :D. Fica critério do desenvolvedor sua forma de organização. E que pode ser muito bem alterada depois sem grande complicações, algo que no modelo relacional gera uma leve dor de cabeça.</p>

<p>Os <strong>Documents</strong> são representados por um conjunto de dados em formato JSON, mas estes documentos quando inseridos são convertidos para um formato mais rico chamado BSON (serialização, junção de Binário com JSON) que dá muito mais performace aos seus dados e as operações que os afetam (Find, Update, Delete, etc.).</p>

<p>O nome Mongo vem de "humongous" que significa gigantesco (ou grande, enorme, monstruoso). MongoDB é livre e de código aberto.</p>

<h3>Quem usa?</h3>

<p>Empresas como: Mailbox, LinkedIn, Parse, SourceForge, eBay, GitHub e <a href="http://www.mongodb.org/about/production-deployments/">mais</a></p>

<center>
<iframe src="https://giphy.com/embed/Xh1vgIUkJbPKo" width="500" height="271" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</center>


<h3>Instalação</h3>

<p>Este post não tem o foco na instalação do MongoDB, <a href="http://docs.mongodb.org/manual/installation/">este link</a> vai ajudar nesta tarefa. Lembrando que o time do MongoDB sugere que seja usada a versão 64-bit.</p>

<center>
<iframe src="https://giphy.com/embed/DVTv8Jk7cCn60" width="500" height="281" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</center>


<h3>Como criar uma Database?</h3>

<p>Então, o MongoDB tem uma característica muito interessante, para usar uma Database não é necessário criá-la anteriormente, o método "use" já faz isso, claro, caso a Database não exista.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Mostrar todas as minhas databases  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">show</span> <span class="n">dbs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Criar/Selecionar minha database  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">use</span> <span class="n">mongol</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Como criar uma Collection?</h3>

<p>Assim como as Databases nossas collections (tabelas) não precisam ser criadas com um comando específico, na hora do insert o MongoDB já verifica a existência da collection e cria se não encontrar (coisa linda de GOD).</p>

<h3>Insert</h3>

<p>Podemos inserir nossos dados assim:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Insert poderoso  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="s2">&quot;nome&quot;</span><span class="p">:</span> <span class="s2">&quot;Lloyd Christmas&quot;</span><span class="p">,</span> <span class="s2">&quot;filme&quot;</span><span class="p">:</span> <span class="s2">&quot;Dumb &amp;amp; Dumber&quot;</span><span class="p">,</span> <span class="s2">&quot;ator&quot;</span><span class="p">:</span> <span class="s2">&quot;Jim Carrey&quot;</span><span class="p">,</span> <span class="s2">&quot;idade&quot;</span><span class="p">:</span> <span class="mi">52</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Como podemos também criar variáveis e referenciá-las no insert
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Insert poderoso com variavel  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">usuario</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;nome&quot;</span><span class="p">:</span> <span class="s2">&quot;Harry Débi Dunne&quot;</span><span class="p">,</span> <span class="s2">&quot;filme&quot;</span><span class="p">:</span> <span class="s2">&quot;Dumb &amp;amp; Dumber&quot;</span><span class="p">,</span> <span class="s2">&quot;ator&quot;</span><span class="p">:</span> <span class="s2">&quot;Jeff Daniels&quot;</span><span class="p">,</span> <span class="s2">&quot;idade&quot;</span><span class="p">:</span> <span class="mi">59</span><span class="p">};</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">usuario</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note que não criamos nossa collection de "usuarios". Ao rodar este insert o MongoDB irá verificar se a coleção de "usuarios" existe, criará se necessário e adicionará os documentos passados para inserção.</p>

<h3>Find</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Find avassalador  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;busca todos os registros de users&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">find</span><span class="p">();</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;busca todos os registros de users&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">e</span> <span class="n">retorna</span> <span class="n">o</span> <span class="n">json</span> <span class="n">formatado</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;db.users.find().pretty();&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">busca</span> <span class="n">todos</span> <span class="n">os</span> <span class="n">registros</span> <span class="n">onde</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;ator seja igual a Jim Carrey&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="n">ator</span><span class="p">:</span> <span class="s2">&quot;Jim Carrey&quot;</span><span class="p">});</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;busca todos os registros que&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">tenham</span>  <span class="n">no</span> <span class="n">nome</span><span class="p">,</span> <span class="n">parecido</span> <span class="n">com</span> <span class="n">o</span> <span class="n">like</span> <span class="n">no</span> <span class="no">SQL</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;db.users.find({nome: /</span><span class="n">D</span><span class="err">é</span><span class="n">bi</span><span class="o">*/</span><span class="n">i</span><span class="p">});</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;busca todos os registros que&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">tenham</span> <span class="n">D</span><span class="err">é</span><span class="n">bi</span> <span class="n">no</span> <span class="n">nome</span><span class="p">,</span> <span class="n">parecido</span> <span class="n">com</span> <span class="n">o</span> <span class="n">like</span> <span class="n">no</span> <span class="no">SQL</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;db.users.find({nome: /</span><span class="n">D</span><span class="err">é</span><span class="n">bi</span><span class="o">*/</span><span class="n">i</span><span class="p">});</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;definindo um objeto regex&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="n">nome</span><span class="p">:</span> <span class="p">{</span><span class="vg">$regex</span><span class="p">:</span> <span class="s1">&#39;Débi*&#39;</span><span class="p">,</span> <span class="vg">$options</span><span class="p">:</span> <span class="s1">&#39;i&#39;</span><span class="p">}});</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;busca todos os registros de users&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">filtrando</span> <span class="n">as</span> <span class="n">colunas</span> <span class="n">que</span> <span class="n">ser</span><span class="err">ã</span><span class="n">o</span> <span class="n">retornadas</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;db.users.find(null, {nome: 1});&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Olhando o código acima você pode perceber que temos um elemento chamado "$regex", que são operadores de avaliação. Assim como o "$regex" existem outros operadores entre eles: $where e $text. Para conhecer mais sobre estes operadores de avaliação <a href="http://docs.mongodb.org/manual/reference/operator/query-evaluation/">clique aqui</a>.</p>

<p>Existem também operadores de comparação que nos permite realizar buscas com definições mais detalhadas. Ex: ">", ">=", "&lt;" e "&lt;=".</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Find humilhador  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="n">idade</span><span class="p">:</span> <span class="p">{</span><span class="vg">$gte</span><span class="p">:</span> <span class="mi">50</span><span class="p">}});</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">find</span><span class="p">({</span><span class="n">idade</span><span class="p">:</span> <span class="p">{</span><span class="vg">$gte</span><span class="p">:</span> <span class="mi">54</span><span class="p">}});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No site do MongoDB tem uma lista com todos os operadores de query, <a href="http://docs.mongodb.org/manual/reference/operator/query/">clique aqui</a> e veja como melhorar suas consultas usando esta excelente ferramenta (momento jabá hehehehe)</p>

<h3>Update</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Update demolidor  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;atualiza todos os usuários com&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">idade</span> <span class="o">&gt;=</span> <span class="mi">54</span> <span class="n">anos</span> <span class="n">para</span> <span class="mi">50</span> <span class="n">anos</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;db.usuarios.update({idade: {$gte: 54}}, {$set: {idade: 50}});&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">atualiza</span> <span class="n">todos</span> <span class="n">os</span> <span class="n">usu</span><span class="err">á</span><span class="n">rios</span> <span class="n">com</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;idade &gt;= 50 anos para 20 anos&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">idade</span><span class="p">:</span> <span class="p">{</span><span class="vg">$gte</span><span class="p">:</span> <span class="mi">50</span><span class="p">}},</span> <span class="p">{</span><span class="vg">$set</span><span class="p">:</span> <span class="p">{</span><span class="n">idade</span><span class="p">:</span> <span class="mi">20</span><span class="p">}},</span> <span class="p">{</span><span class="n">multi</span><span class="p">:</span> <span class="kp">true</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No primeiro exemplo acima de update ele altera a idade para 50 no primeiro documento que ele encontrar onde idade seja maior igual a 54. Já no segundo ele altera todos os documentos onde a idade seja maior igual a 50.</p>

<h3>Deletar</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Delete deletador :D  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;remove os documentos onde ator seja igual a Jim Carrey&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">remove</span><span class="p">({</span><span class="n">ator</span><span class="p">:</span> <span class="s2">&quot;Jim Carrey&quot;</span><span class="p">});</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;remove todos os documentos da coleção&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">usuarios</span><span class="o">.</span><span class="n">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Acho que ficou claro o papel do remove nas linhas acima neh? O papel dele é te dar um frio na barriga quando for executá-lo. :D</p>

<h3>Mean IO</h3>

<p>Para galera que está afim de desenvolver uma aplicação média de forma rápida e robusta existe o <a href="http://mean.io/">Mean IO</a> que é uma solução full-stack para ajudar nesse desenvolvimento. Ela é formada por MongoDB, Express, AngularJS e Node.js. No mínimo, ao final desta implementação, terá conhecido ferramentas maravilhosas e ampliado seus conhecimentos.</p>

<center>
<iframe src="https://giphy.com/embed/P40Gkig2OTlLy" width="500" height="375" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</center>


<h3>App's para gerenciar sua base MongoDB</h3>

<ul>
<li><a href="http://www.mongovue.com/">http://www.mongovue.com/</a></li>
<li><a href="https://www.mongohq.com/">https://www.mongohq.com/</a></li>
<li><a href="http://www.robomongo.org/">http://www.robomongo.org/</a></li>
<li><a href="http://mongohub.todayclose.com/">http://mongohub.todayclose.com/</a></li>
</ul>


<h3>Considerações</h3>

<p> Atualmente tenho usado em minha startup serviços NoSQL conhecidos como BaaS, eles ajudam bastante na hora de fornecer SDK's e abstrair trabalhos rotineiros como ACL, Confirmação de email, Cadastro de usuário <a href="http://italoqueiroz.github.io/blog/2013/07/15/baas-backend-as-a-service/">clique aqui</a> para saber mais.</p>

<p> Sei que existem várias ferramentas para definirmos nossa arquitetura e não acho que o MongoDB deva ser implementado em todos os seus projetos, mas com certeza você deverá levá-lo em consideração.</p>

<p> Pretendo montar um exemplo em PHP, quando estiver diponível deixo o link aqui abaixo.</p>

<center> 
<iframe src="https://giphy.com/embed/AeWoyE3ZT90YM" width="500" height="210" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</center>


<p></p>
]]></content>
  </entry>
  
</feed>
