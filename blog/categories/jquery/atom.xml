<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: jQuery | Italo Queiroz]]></title>
  <link href="http://italoqueiroz.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://italoqueiroz.github.com/"/>
  <updated>2014-05-27T18:17:10-03:00</updated>
  <id>http://italoqueiroz.github.com/</id>
  <author>
    <name><![CDATA[Italo Queiroz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jHandlebars - v1.0.0]]></title>
    <link href="http://italoqueiroz.github.com/blog/2013/12/11/jhandlebars-v1-dot-0-0/"/>
    <updated>2013-12-11T15:36:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2013/12/11/jhandlebars-v1-dot-0-0</id>
    <content type="html"><![CDATA[<p>Ontem lancei a nova versão do plugin <a href="https://github.com/italoqueiroz/jHandlebars/" title="jHandlebars">jHandlebars</a> v1.0.0. Também realizei o cadastro do plugin no <a href="bower.io" title="BOWER">BOWER</a>. Corrigi alguns bugs :P e adicionei melhorias.</p>

<h2>Instalação:</h2>

<pre><code>$ bower install jhandlebars
</code></pre>

<h2>Colocando para rodar:</h2>

<p>Para utilizar o plugin corretamente você deve importar as libs da jQuery e Handlebars.</p>

<p>```html</p>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>


<script type="text/javascript" src="http://italoqueiroz.github.com//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.1.2/handlebars.min.js"></script>


<script type="text/javascript" src="jquery.jhandlebars.js"></script>


<p>```</p>

<h2>Alguns exemplos:</h2>

<ul>
<li>Exemplo 1:</li>
</ul>


<p>```javascript
$(document).ready(function(){</p>

<pre><code>$("#element").handlebars({
  json: 'http://yourLocation.com.br/data.json', 
  template:'&lt;div class="entry"&gt;&lt;h1&gt;jHandlebars&lt;/h1&gt;&lt;div class="body"&gt;{{title}}&lt;/div&gt;&lt;/div&gt;'
});
</code></pre>

<p>});
```</p>

<ul>
<li>Exemplo 2:</li>
</ul>


<p>```javascript
$(document).ready(function(){</p>

<pre><code>$("#element").handlebars({
  json:{title:'Meu título'},
  template:'http://yourLocation.com.br/template.html'
});
</code></pre>

<p>});
```</p>

<ul>
<li>Exemplo 3:</li>
</ul>


<p>```javascript
$(document).ready(function(){</p>

<pre><code>$("#element").handlebars({
  json:'http://yourLocation.com.br/data.json',
  template:'http://yourLocation.com.br/template.html'
});
</code></pre>

<p>});
```</p>

<ul>
<li>Exemplo 4:</li>
</ul>


<p>```javascript
$(document).ready(function(){</p>

<pre><code>$("#element").handlebars({
  json: {title:'Meu título'},
  template:'&lt;div class="entry"&gt;&lt;h1&gt;jHandlebars&lt;/h1&gt;&lt;div class="body"&gt;{{title}}&lt;/div&gt;&lt;/div&gt;'
});
</code></pre>

<p>});
```</p>

<p>Ainda não conhece <a href="http://handlebarsjs.com/" title="Handlebars">Handlebars?</a> Então não perca tempo, adicione esta lib em suas leituras e veja o quanto sua vida mudará depois disso :D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin jQuery para Handlebars]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/27/plugin-jquery-para-handlebars/"/>
    <updated>2012-10-27T19:02:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/27/plugin-jquery-para-handlebars</id>
    <content type="html"><![CDATA[<p>Fala manolada.</p>

<p>Estive usando o Handlebars e percebi que eu realizava algumas ações repetitivas, que não facilitavam em nada o desenvolvimento dos templates. Daí surgiu a idéia de criar um plugin jQuery que fizesse o simples, tendo como parâmetro o caminho do template e o do json que seria recebido para a geração do conteúdo.</p>

<p>{% raw %}
``` javascript jHandlebars.js
;(function ( $, window, undefined ) {</p>

<pre><code>  // Nome do plugin =&gt; 'handlebars';
  var pluginName = 'handlebars',
    document = window.document,
    dataJson = null,
    templateHandleBars = null,
    defaults = {
      json: {},
      template: ''
    };

  // Construtor do nosso Plugin;
  function Plugin(element, options) {
    this.element = element;
    this.options = $.extend({}, defaults, options) ;

    this._defaults = defaults;
    this._name = pluginName;

    this.init();
  }

  Plugin.prototype = {
    //Método init();
    init: function () {
      this.refresh();
    },
    //Método refresh() que cuida de instanciar o template e o json;
    //Depois monta e compila os dados para retornar o html gerado;
    refresh: function () {
      //Verifica se o template já foi instanciado e se é uma função;
      if (!templateHandleBars &amp;&amp; !jQuery.isFunction(templateHandleBars)) {
        templateHandleBars = this._loadTemplate();
      }
      //Verifica se já está instanciado o json de dados;
      if (!dataJson || jQuery.isEmptyObject(dataJson)) {
        dataJson = this._loadJson();
      }
      //Só é possível montar o template se o "templateHandleBars" for uma função;
      if (jQuery.isFunction(templateHandleBars)) {
        var templateHtml = templateHandleBars(dataJson);
        $(this.element).html(templateHtml);
      } else {
        $(this.element).html('Ocorreu um erro no template handleBars, verifique o caminho informado.');
      }

    },
    //Método _loadTemplate() que carrega e instancia o template handlebars;
    _loadTemplate: function () {
      var template = this._ajax(this.options.template, 'html');
      if (jQuery.type(template) === 'string') {
        return Handlebars.compile(template);
      }
      return '';
    },
    //Método _loadJson() que carrega e instancia o json de dados;
    _loadJson: function () {
      //Se o json for um objeto ele não chama o AJAX;
      if (jQuery.isPlainObject(this.options.json)) {
        return this.options.json
      } else if (jQuery.type(this.options.json) === 'string') {
        return this._ajax(this.options.json, 'json');
      }
      return {};
    },
    //Método _ajax() responsável por realizar as requisições AJAX do plugin;
    _ajax: function (url, dataType) {
      var dataReturn = null;

      $.ajax({
        url: url,
        dataType: dataType,
        async: false,
        success: function (data) {
          if (data) {
            dataReturn = data;
          }
        }
      });

      return dataReturn;
    },
  };
  //Função que instancia nosso Plugin passando o element e os options informados;
  $.fn[pluginName] = function (options) {
    return this.each(function () {
      if (!$.data(this, 'plugin_' + pluginName)) {
        $.data(this, 'plugin_' + pluginName, new Plugin( this, options ));
      }
    });
  }

}(jQuery, window));
</code></pre>

<p>```
{% endraw %}</p>

<p>Para usar é muito simples</p>

<p>{% raw %}
``` javascript exemplo.js
$('#element').handlebars({</p>

<pre><code>json: {pessoas:[{nome:'italo'}, {nome:'queiroz'}]},
template: 'caminho_do_template_handlebars.hb'
</code></pre>

<p>});</p>

<p>//ou</p>

<p>$('#element').handlebars({</p>

<pre><code>json: 'caminho_do_json.json',
template: 'caminho_do_template_handlebars.hb'
</code></pre>

<p>});
```
{% endraw %}</p>

<p>Caso queiram colaborar fiquem a vontade, segue o link do <a href="https://github.com/italoqueiroz/jHandlebars">GitHub</a> com um exemplo do uso.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando widget usando jQuery]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery/"/>
    <updated>2012-10-17T18:01:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery</id>
    <content type="html"><![CDATA[<p>Atualmente a moda é <span class="bobagem">namorar pelado</span> Widget's, que são componentes de interface que fornecem uma funcionalidade específica. Acessando o site da jQueryUI encontrei este link
<a href="http://wiki.jqueryui.com/w/page/12138135/Widget%20factory">Widget Factory</a>.</p>

<p>Montei o exemplo a seguir tentando repassa o que consegui abstrair dos conceitos informados pela jQueryUI.</p>

<p>Primeiro iremos criar 2 arquivos <strong>index.html</strong>  e <strong>jquery.custom.list.js</strong></p>

<p>No <strong>index.html</strong> montaremos uma estrutura simples de html adicionando algumas chamadas para as libs da jQuery (v 1.8) e jQueryUI (v 1.9).</p>

<p>{% codeblock index.html lang:html %}
&lt;!DOCTYPE HTML>
<html lang="en-US">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css" /&gt;
</code></pre>

<p>  <script src="http://code.jquery.com/jquery-1.8.2.js"></script>
  <script src="http://code.jquery.com/ui/1.9.0/jquery-ui.js"></script></p>

<pre><code>&lt;script type="text/javascript" src="jquery.custom.list.js"&gt;&lt;/script&gt;
&lt;style type="text/css"&gt;
    table td, table th {
        padding:5px;
    }
&lt;/style&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div id="demo"&gt;&lt;/div&gt;
</code></pre>

<p></body>
</html>
{% endcodeblock %}</p>

<p>O jquery.custom.list.js será o arquivo onde criaremos nosso widget.</p>

<p>{% codeblock jquery.custom.list.js lang:js %}
$(function() {
  $.widget("custom.list", {</p>

<pre><code>// default options
options: {
  data: [],
  columns: ['nome', 'idade']  
},

htmlTable: null,

//Construtor
_create: function() {
  console.log('construtor');
  this.element.addClass('custom-list');
  this._refresh();
},

//Este método é chamada assim que for criado e quando for alterada as opções.
_refresh: function() {
  //verifica se foi informado os dados.
  if (this.options.data.length) {
    this._createTable();
    this._createHeaderTable();
    this._createBodyTable();
  } else {
    $('&lt;div&gt;', {id:"custon-list-alert", text:"Não existem registros"})
      .appendTo(this.element);
  }
},

//Método privado que cria a tabela
_createTable: function () {
  this.element.html('&lt;table&gt;');
},

//Método privado que cria o cabeçalho
_createHeaderTable: function () {
  var headerTable = $('&lt;thead&gt;');

  $('&lt;tr&gt;').appendTo(headerTable);
  $.each(this.options.columns, function(key, column){
    $('&lt;th&gt;', {text:column, class:'ui-widget-header'}).appendTo(headerTable.find('tr'));
  });

  this.element.find('table').html(headerTable);
},

//Método privado que monta o corpo da tabela com os dados passados.
_createBodyTable: function () {
  var bodyTable = $('&lt;tbody&gt;'),
  self = this;

  $.each(self.options.data, function(key, data){
    $('&lt;tr&gt;').appendTo(bodyTable);
    $.each(self.options.columns, function(i, column){
      $('&lt;td&gt;', {text: (data[column]?data[column]:'') , class:'ui-state-default'}).appendTo(bodyTable.find('tr:last-child'));
    }); 
  });

  this.element.find('table').append(bodyTable);
},

//Responsável por remover o plugin e fazer as limpezas necessárias.
_destroy: function() {
  this.element.find('table').remove();
  this.element.removeClass('custom-list');
},

// Este método é chamado sempre que uma opção é alterada
// e toda vez que uma opção é alterada atualizamos nosso widget.
_setOptions: function() {
  // _super and _superApply continuam a manipulação correta dos argumentos passados.
  this._superApply( arguments );
  this._refresh();
}
</code></pre>

<p>  });
});
{% endcodeblock %}</p>

<p>No início do arquivo temos a chamada do $.widget que tem como primeiro parâmetro o namespace (custom) e nome (list) do seu plugin, caso  o namespace não exista a jQuery já criara a instância.<br />
O segundo parâmetro é o objeto widget de onde você deseja herdar, podendo este também ser um novo objeto.<br />
Terceiro parâmetro são as configurações que você deseja adicionar ou sobrescrever no widget herdado.</p>

<p>Como você pode perceber temos alguns métodos que iniciam com "&#95;" (underscore), este são métodos privados (por convenção) não podem ser acessados Ex: $(‘#demo’).list(‘&#95;create’)</p>

<p>São necessários a princípio as seguintes implementações:</p>

<h3>options: Com as opções default do seu widget.</h3>

<h3>_create: Que é o construtor do seu widget.</h3>

<h3>_destroy: Que é o seu lixeiro, assim que acionado ele remove o widget e você pode informar demais procedimentos para a “limpeza” do DOM.</h3>

<p>Adicionei meus métodos privados:<br />
&#95;refresh, &#95;createTable, &#95;createHeaderTable, &#95;createBodyTable.</p>

<p>E sobrescrevi o setOptions, pois sempre que for alterado meus options o widget será atualizado (&#95;refresh).</p>

<p>Abra o console do seu navegador e tente as seguintes instruções de cada vez:<br />
$('#demo').list('option', 'columns', ['nome']);<br />
$('#demo').list('option', 'data', [{nome:'Nome de alguém', idade:43}]);<br />
$('#demo').data('list')._refresh;<br />
$('#demo').list('destroy');<br /></p>

<p><a href="https://github.com/italoqueiroz/widgetExemplo">Link do código no GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando templates com HandleBars]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars/"/>
    <updated>2012-10-09T17:05:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars</id>
    <content type="html"><![CDATA[<p>Se você querido “manolo” leitor que quando utiliza javascript se “amarra” em misturar lógica com string’s que geram seu html.</p>

<p>{% codeblock Html misturado com a lógica lang:js %}
var html = "<div></p>

<pre><code>            &lt;ul&gt;
                &lt;li&gt;1&lt;/li&gt;
                &lt;li&gt;2&lt;/li&gt;
                &lt;li&gt;3&lt;/li&gt;
                &lt;li&gt;4&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;";

//Bizarro :D eu sei     
</code></pre>

<p>  if (1 == 1) {</p>

<pre><code>   html += '&lt;span&gt; Coisa linda &lt;/span&gt;';
}

$('#target').html(html);            
</code></pre>

<p>{% endcodeblock %}</p>

<p>Venho então lhe propor uma solução que poderá mudar a sua vida de uma vez por todas. <span class="bobagem">(sei que isso foi bem tosco)</span></p>

<p>Desde que comecei a postar tenho falado sobre templates javascript e dentre eles sobre o HandleBars, então pensei em montar este tutorial com o foco apenas em conhecermos o template e como é simples sua implementação.</p>

<p>Começaremos criando uma estrutura de pasta conforme a imagem abaixo. <br />
{% img center /images/criando_template_handlebars/estrutura.png 176 %}</p>

<p>Na nossa <strong>index.html</strong> criaremos um documento html padrão, adicionando algumas bibliotecas javascript (jQuery  e HandleBars) e com 2 div's, uma com id <strong>table</strong> e outra com id <strong>div</strong>.</p>

<p>{% codeblock index.html lang:html %}
&lt;!DOCTYPE HTML>
<html lang="en-US">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div&gt;
    &lt;h3&gt;Template 1 - Table&lt;/h3&gt;
    &lt;div id="table"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h3&gt;Template 2 - Div&lt;/h3&gt;
    &lt;div id="div"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body></p>

<!-- HandleBars Library-->


<script type="text/javascript" src="http://cloud.github.com/downloads/wycats/handlebars.js/handlebars-1.0.rc.1.js"></script>


<!-- jQuery Library-->


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>


<p></html>
{% endcodeblock %}</p>

<p>E montaremos nossos 2 arquivos de template (table.hb e div.hb) com os seguintes códigos.</p>

<p>{% raw %}
``` html table.hb</p>

<pre><code>&lt;style type="text/css"&gt;
    #tableComponent td{border:1px #000 solid;padding:10px}
&lt;/style&gt;
&lt;table id='tableComponent'&gt;
    {{#each pessoas}}
        &lt;tr&gt;
            &lt;td&gt;{{nome}}&lt;/td&gt;
            &lt;td&gt;{{idade}}&lt;/td&gt;
        &lt;/tr&gt;
    {{/each}}
&lt;/table&gt;
</code></pre>

<p>```
{% endraw %}</p>

<p>{% raw %}
``` html div.hb</p>

<pre><code>&lt;style type="text/css"&gt;
    .divComponent div{
        width:100px;
        height:50px;
        padding:10px;
        margin:10px;
        color:#FFF;
        background:#A5BFDD;
        float:left;
}   
&lt;/style&gt;
&lt;div class="divComponent"&gt;
  {{#each pessoas}}
      &lt;div&gt;
      Nome: {{nome}}&lt;br /&gt;
      Idade: {{idade}}
      &lt;/div&gt;
  {{/each}}
&lt;/div&gt;
</code></pre>

<p>```
{% endraw %}</p>

<p>Como você deve ter notado, existem elementos que estão entre chaves duplas - { { nome } } – que são usadas sempre que quisermos imprimir o valor de um elemento. Caso estas chaves duplas venham referenciando um bloco de expressão - { { #each pessoas } } - é carregado este helper que pode ser um loop, uma formatação de impressão, condicionais - { { #if pessoas } } - e zas.</p>

<p><strong>**obs: Não existe este espaço entre as chaves como coloquei no texto acima, mas tive que fazer isso por limitação da minha ferramenta de gerenciamento de conteúdo.</strong></p>

<p>Logo abaixo temos o código javascript que faz toda a mágica de chamar nossos templates. Tentarei explicar da melhor forma possível :D. Lembrando que o javascript poderia ter sido bem melhor elaborado, com funções para gerenciar nossos templates, mas achei melhor deixar isso para outro post e não complicar mais as coisas!!!</p>

<p>{% raw %}
``` js JS que chama nossos templates</p>

<pre><code>$(function() {

    /******************************************
     * Carregando o template "table"
     ******************************************/
    //Variável reponsável por guardar o template de "table"
  var tableTemplate = null;
  //Carrega o template de "table";
    $.ajax({
        url: 'table.hb',
        dataType: 'html',
        async: false,
        success: function (template) {
            if (template) {
                tableTemplate = Handlebars.compile(template);
            }
        }
    });
    //Dados que seram passados para o template.
    var context = {"pessoas":[{"nome":"Pedro","idade":23},{"nome":"Kleber","idade":20},{"nome":"Marcos","idade":31}]};
    //Gera o html de acordo com o JSON passado.
    var tableHtml = tableTemplate(context);
    //Seta o html para a div#table, outra opção seria $('#table').html(tableTemplate(context));
    $('#table').html(tableHtml);

    /******************************************
     * Carregando o template "div"
     ******************************************/
    //Variável reponsável por guardar o template de "div"
  var divTemplate = null;
  //Carrega o template de "table";
    $.ajax({
        url: 'div.hb',
        dataType: 'html',
        async: false,
        success: function (template) {
            if (template) {
                divTemplate = Handlebars.compile(template);
            }
        }
    });
    //Gera o html de acordo com o JSON passado (usaremos o mesmo que do template "table").
    var divHtml = divTemplate(context);
    //Seta o html para a div#div, outra opção seria $('#div').html(divTemplate(context));
    $('#div').html(divHtml);
});
</code></pre>

<p>```
{% endraw %}</p>

<p>Resumidamente o que precisei fazer foi carregar meus arquivos .hb que poderiam ser qualquer outro tipo de extensão (Ex: table.html, table.italo, table.queiroz), o importante mesmo é o seu conteúdo.</p>

<p>Para carregar e obter o html dos meus templates utilizei a função <strong>$.ajax()</strong> (Linha 9  e linha 32). Após ter a string dos meus arquivos, compilo o mesmo para ser um template HandleBars (Linha 15 e linha 38).</p>

<p>Depois de feito isso é necessário passar um JSON (Linha 20) para o nosso template gerar o html (Linha 22 e linha 43) e logo depois adiciono o html gerado em nossas div's para serem apresentadas no browser.</p>

<h2>Conclusão</h2>

<p>O uso de templates JS ajudam muito na criação e na manutenção de conteúdos dinâmicos, além de prover uma organização, separando as montagens de html da lógica do sistema. Caso seja necessário um designer poderá mexer apenas no arquivo do template para alterar a aparência sem necessariamente ter que editar um arquivo js.</p>

<p>Tentei explicar de forma bem simples o funcionamento do HandleBars, aconselho que você leia a <a href="http://handlebarsjs.com/">documentação</a> para saber o que mais esta engine de template js pode fazer....</p>

<p>Segue o <a href="https://github.com/italoqueiroz/ExemploHandleBars">link</a> no GitHub para download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/04/meteor/"/>
    <updated>2012-10-04T20:09:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/04/meteor</id>
    <content type="html"><![CDATA[<p>Durante meu momentos de estudo me deparei com uma framework pra lá de curiosa, ela simplesmente prometia uma programação no lado servidor e no lado cliente usando somente Javascript e trabalhando de forma reativa: qualquer alteração realizada na página seria imediatamente populada em todos os outros clientes.</p>

<p>Até então não tinha acredito muito bem, e mesmo que possível, imaginei que fosse uma dificuldade imensa para configurar a máquina. Leigo engano logo após ver os vídeos de demonstração no site fiquei absurdamente surpreso. No momento de sua instalação não tive nenhum problema, sendo possível ainda baixar e rodar projetos demos.</p>

<p><a href="http://meteor.com">Meteor</a> tem um conjunto de pacotes que podem ser adicionados ao projeto. <br />
 Ex: <a href="http://www.mongodb.org/">mongoDB</a>, <a href="http://handlebarsjs.com/">HandleBars</a>, <a href="http://nodejs.org/">Node.js</a>, <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, entre outros...</p>

<p>Para entender melhor como funcionava montei um <a href="http://pt.wikipedia.org/wiki/Kanban">Kanban</a> <span class="bobagem">criei o repositório "kanbam" com  "m", sorry</span> onde os usuários vão adicionando tarefas e movendo-as pelo quadro.</p>

<p>Segue o link do "<a href="https://github.com/italoqueiroz/kanbam">kanbam</a>" no GitHub.</p>
]]></content>
  </entry>
  
</feed>
