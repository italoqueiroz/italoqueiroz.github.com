<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Italo Queiroz]]></title>
  <link href="http://italoqueiroz.github.com/atom.xml" rel="self"/>
  <link href="http://italoqueiroz.github.com/"/>
  <updated>2013-01-28T21:03:07-02:00</updated>
  <id>http://italoqueiroz.github.com/</id>
  <author>
    <name><![CDATA[Italo Queiroz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instalando MongoDB no Ubuntu e habilitando extensão no ZendServer]]></title>
    <link href="http://italoqueiroz.github.com/blog/2013/01/28/instalando-mongodb-no-ubuntu-e-habilitando-extensao-no-zendserver/"/>
    <updated>2013-01-28T20:16:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2013/01/28/instalando-mongodb-no-ubuntu-e-habilitando-extensao-no-zendserver</id>
    <content type="html"><![CDATA[<p>Pois bem, a instalação do MongoDB pra quem já tentou é um pouco chata e complicada no primeiro momento. Alguns erros ocorrem dificultando a instalação e podem desistimular alguns desenvolvedores a usarem.</p>

<p>Montei uma VM Ubuntu com Vagrant para ter histórico de todos os comandos necessários, então para começar abra o terminal e siga os passos abaixo:</p>

<ol>
<li><strong>1) Importe a chave(GPG key) 10gen, necessária para pacotes Ubuntu:</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>2) Crie um arquivo em &#8220;/etc/apt/sources.list.d/10gen.list&#8221; adicionando o caminho do repositório:</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>3) Recarregue o apt-get</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>4) Instale o pacote</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install mongodb-10gen
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>5) Instale o automake e autoconf, necessário para utilizar o phpize</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install automake
</span><span class='line'>sudo apt-get install autoconf
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>6) Instale a extensão via pecl do ZendServer</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo /usr/local/zend/bin/pecl install mongo
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>7) Abra o painel do ZendServer(http://localhost:10081/) e no caminho &#8220;Server Setup > Extensions&#8221; habilite a extensão do mongo clicando em &#8220;Turn on&#8221;</strong></li>
</ol>


<br />


<ol>
<li><strong>8) Reinicie o apache</strong></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo /usr/local/zend/bin/zendctl restart
</span></code></pre></td></tr></table></div></figure>


<p>Espero que após estes 8 passos você tenha o mongo instalado em seu Ubuntu e a extensão habilitada no PHP.</p>

<p>Link de referência:
<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">MongoDb on Ubuntu</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Código PHP - Você segue algum padrão?]]></title>
    <link href="http://italoqueiroz.github.com/blog/2013/01/21/codigo-php-voce-segue-algum-padrao/"/>
    <updated>2013-01-21T12:36:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2013/01/21/codigo-php-voce-segue-algum-padrao</id>
    <content type="html"><![CDATA[<p>Quando inicia seu código, você pensa em algum padrão de formatação? Ou na definição do namespace da classe? Ou prefere seguir um padrão somente seu? Ou como muitos nem sabia que um código poderia ter um padrão definido e semelhante a grande projetos no mercado?</p>

<p>Eu sempre gostei de seguir padrões de código, pois isso ajuda a outros desenvolvedores (que seguirem esse padrão) se adaptar melhor em projetos diferentes. Por estes motivo nunca criei o meu próprio padrão, procuro encontrar um dentre a comunidade PHP ou ZendFramework. E durante esta busca encontrei a galera do PHP-Fig.</p>

<p><img src="http://italoqueiroz.github.com/images/php-fig/phpfig.png" alt="PHPFIG icon" /></p>

<h4>O que é o PHP-Fig?</h4>

<blockquote><p>The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together. Our main audience is each other, but we’re very aware that the rest of the PHP community is watching. If other folks want to adopt what we’re doing they are welcome to do so, but that is not the aim.</p></blockquote>

<h4>O que realmente isso significa?</h4>

<p>Representantes de algumas frameworks PHP (ZendFramework, Symfony, CakePHP, etc..) e outros projetos que tem seu código escrito em PHP se juntam para debater alguns pontos semelhantes entre seus fontes. Assim tentam definir padrões para que estes projetos possam trabalhar em conjunto de forma fácil e rápida (plug-and-play code) e terem ao menos um padrão de formatação e definição de layout PHP parecidos.</p>

<h5>Como funciona?</h5>

<p>Todas os padrões são divididos entre PSR&#8217;s (Proposing a Standards Recommendation). Hoje o PHP-Fig tem 4 PSR&#8217;s. São elas:</p>

<ul>
<li><strong>PSR-0</strong>: Tem como objetivo definir padrões para definicões de classes e namespaces afim centralizar o autoload para todos os projetos que seguem este padrão ao invés de você ter que escrever um autoload para ZF e outro para o Doctrine.</li>
</ul>


<hr />

<ul>
<li><strong>PSR-1</strong>: Fornece regras, como as tags PHP permitidas em um código, Enconding, nome de métodos, etc.</li>
</ul>


<hr />

<ul>
<li><strong>PSR-2</strong>: Define os padrões de código, como formatar uma função, um if, um método com vários argumentos, etc.</li>
</ul>


<hr />

<ul>
<li><strong>PSR-3</strong>: Descreve uma interface para bibliotecas de LOG.</li>
</ul>


<hr />

<br />


<h4>Segue o link para quem estiver interessado <a href="http://www.php-fig.org/">PHP-FIG</a>.</h4>

<p>E sigam a lista, pois este padrão está em constante evolução onde sugestões são bem-vindas.</p>

<p>Espero ter ajudado!!!! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework Certification]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/12/06/zend-framework-certification/"/>
    <updated>2012-12-06T11:23:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/12/06/zend-framework-certification</id>
    <content type="html"><![CDATA[<p>Fala galera, depois de um tempo sem nenhum post venho por meio desta <span class="bobagem">kkkkk</span> informar que finalmente tirei minha certificação ZF (Zend Framework).</p>

<p>E por que deste post? Vou tentar falar sobre todo o processo e como realizei meus estudos.</p>

<p>Seguinte, hoje no mercado temos dois tipos de certificação PHP que são: PHP 5.3 e Zend Framework. As duas certificações são oferecidas pela <a href="http://www.zend.com">Zend</a> e são aplicadas pela Pearson VUE e suas autorizadas.</p>

<p>O local onde realizei a prova se chama <a href="http://www.foton.la">Fóton</a>, tem uma estrutura muito boa e a pessoa responsável por nos encaminhar ao teste foi super simpática. A prova foi toda em inglês, com questões de única escolha, múltipla escolha e campos de texto. O tempo para realizar a prova foi de 90 minutos, eu consegui terminar faltando 4 minutos, creio que o tempo é suficiente pois o que me atrapalhou foi o MEU INGLÊS.</p>

<p>Ao final da prova aparece na tela &#8220;Congratulations&#8221; se você conseguiu e não sei a mensagem que aparece caso contrário.</p>

<h3>Foquei meus estudos nos seguintes documentos:</h3>

<ul>
<li><a href="http://downloads.zend.com/framework/generic/ZFC_Study_Guide_v1.pdf">Study Guide da Zend</a></li>
<li><a href="http://akrabat.com/wp-content/uploads/ZendCon09-ZF-Certification-Refresher.pdf">Zend Framework (a refresher)</a></li>
<li><a href="http://framework.zend.com/manual/1.5/en/manual.html">Manual da Zend</a></li>
<li>Código fonte da versão 1.5</li>
</ul>


<p>Então é isso galera! Boa sorte para quem irá fazer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/11/21/vagrant/"/>
    <updated>2012-11-21T14:12:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/11/21/vagrant</id>
    <content type="html"><![CDATA[<p>Galera pensei em fazer este post com o intuito de compartilhar alguns link úteis para aqueles que estão, assim como eu, na luta :D para usar o Vagrant como seu provedor de ambiente. Mas se você não sabe o que é ou pra que &#8220;bulufas&#8221; serve o Vagrant, segue uma breve abordagem.</p>

<p>Sempre quando entramos em um novo projeto temos um ambiente específico para aquele projeto rodar, mas agora pense em um cenário em que você está envolvido com mais de 2 projetos.</p>

<h3>Lista dos projetos</h3>

<ol>
<li>O primeiro é um legado da empresa, feito em PHP 4.x</li>
<li>O segundo é um projeto que será o carro chefe da empresa feito em PHP 5.2</li>
<li>O terceiro é um freelancer que está sendo desenvolvido usando ZendFramework2 e PHP 5.4</li>
</ol>


<h3>Como preparar sua máquina para atender a esta demanda?</h3>

<p>Este problema já me atrasou muito nas migrações de projetos e Vagrant veio <strong>TAMBÉM</strong> para resolver isso.
Vagrant é uma ferramenta open source lálálálá&#8230; se você quiser saber mais sobre como foi criado clique <a href="http://vagrantup.com/about.html">aqui</a>.</p>

<h3>Entendendo como funciona</h3>

<ul>
<li><p>Nele você seleciona qual será o SO ou Box (CentOS 5.8 x86_64, Ubuntu precise 32, Debian Squeeze 64, etc) de sua máquina virtual. Este SO você precisará baixar somente uma vez, podendo reaproveitar sempre que necessário para gerar suas VM.</p></li>
<li><p>Você gera a VM informando qual box irá usar (Ex: vagrant init precise32). Lembrando que você deve dar init na pasta do projeto e a mesma será usada na sua vm como seu DOCUMENT_ROOT.</p></li>
<li><p>O Vagrant irá gerar um arquivo chamado Vagrantfile, e esse cara que faz toda a mágica. Lembre que o Vagrant irá criar uma máquina virtual para você customizar da forma como bem entender, mas você não precisará editar seus códigos dentro da VM. OPA????? Ficou confuso??? Mas é exatamente isso, a VM irá prover o ambiente para você rodar seu código. No Vagrantfile você pode fazer a seguinte configuração &#8211; config.vm.forward_port 80, 8080 &#8211; Aqui estou falando que a porta 80 da minha VM irá responder a porta 8080 do HOST (Meu computador). E para visualizar o código &#8220;tinindo&#8221; é só jogar no browser a URL &#8220;localhost:8080&#8221;.</p></li>
</ul>


<p>Claro que não é só para isso que o Vagrant funciona, mas isso já quebra um galhão. Sem falar que depois de criada e configurada você pode compartilhar esta VM ou box com a sua equipe, forçando a galera a conversar na mesma língua independente do HOST (Mac, Windows, Linux, etc) de cada um.</p>

<h3>Links úteis</h3>

<ul>
<li><a href="http://www.vagrantup.com">Vagrant site</a></li>
<li><a href="http://www.vagrantbox.es">Listagem de boxes disponíveis.</a></li>
<li><a href="http://puppetlabs.com">Puppet</a>. Com ele você pode criar módulos que para quando gerada sua VM ela já contenha algumas configurações ou pacotes instalados (Ex: ZendServer).</li>
<li><a href="http://forge.puppetlabs.com">Puppet Forge</a>. Repositório com módulos prontos para usar com Vagrant.</li>
<li><a href="http://www.opscode.com/chef/">Chef</a>. Que também serve para gerenciar sua VM, mas usando como linguagem ruby para a construção de seus módulos.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin jQuery para Handlebars]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/27/plugin-jquery-para-handlebars/"/>
    <updated>2012-10-27T19:02:00-02:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/27/plugin-jquery-para-handlebars</id>
    <content type="html"><![CDATA[<p>Fala manolada.</p>

<p>Estive usando o Handlebars e percebi que eu realizava algumas ações repetitivas, que não facilitavam em nada o desenvolvimento dos templates. Daí surgiu a idéia de criar um plugin jQuery que fizesse o simples, tendo como parâmetro o caminho do template e o do json que seria recebido para a geração do conteúdo.</p>

<figure class='code'><figcaption><span>jHandlebars.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span> <span class="nx">$</span><span class="p">,</span> <span class="nb">window</span><span class="p">,</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Nome do plugin =&gt; &#39;handlebars&#39;;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pluginName</span> <span class="o">=</span> <span class="s1">&#39;handlebars&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">document</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataJson</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">templateHandleBars</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">json</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Construtor do nosso Plugin;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">Plugin</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">defaults</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_defaults</span> <span class="o">=</span> <span class="nx">defaults</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">pluginName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Plugin</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Método init();</span>
</span><span class='line'>      <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">refresh</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">//Método refresh() que cuida de instanciar o template e o json;</span>
</span><span class='line'>      <span class="c1">//Depois monta e compila os dados para retornar o html gerado;</span>
</span><span class='line'>      <span class="nx">refresh</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Verifica se o template já foi instanciado e se é uma função;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">templateHandleBars</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">templateHandleBars</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateHandleBars</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_loadTemplate</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//Verifica se já está instanciado o json de dados;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">dataJson</span> <span class="o">||</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">isEmptyObject</span><span class="p">(</span><span class="nx">dataJson</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">dataJson</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_loadJson</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//Só é possível montar o template se o &quot;templateHandleBars&quot; for uma função;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">templateHandleBars</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">templateHtml</span> <span class="o">=</span> <span class="nx">templateHandleBars</span><span class="p">(</span><span class="nx">dataJson</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">templateHtml</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Ocorreu um erro no template handleBars, verifique o caminho informado.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">//Método _loadTemplate() que carrega e instancia o template handlebars;</span>
</span><span class='line'>      <span class="nx">_loadTemplate</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_ajax</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span> <span class="s1">&#39;html&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">//Método _loadJson() que carrega e instancia o json de dados;</span>
</span><span class='line'>      <span class="nx">_loadJson</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Se o json for um objeto ele não chama o AJAX;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">json</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">json</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_ajax</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">json</span><span class="p">,</span> <span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{};</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">//Método _ajax() responsável por realizar as requisições AJAX do plugin;</span>
</span><span class='line'>      <span class="nx">_ajax</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">dataType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dataReturn</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">dataType</span><span class="o">:</span> <span class="nx">dataType</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">async</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">dataReturn</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">dataReturn</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="c1">//Função que instancia nosso Plugin passando o element e os options informados;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">[</span><span class="nx">pluginName</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;plugin_&#39;</span> <span class="o">+</span> <span class="nx">pluginName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;plugin_&#39;</span> <span class="o">+</span> <span class="nx">pluginName</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Plugin</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span> <span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nb">window</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para usar é muito simples</p>

<figure class='code'><figcaption><span>exemplo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#element&#39;</span><span class="p">).</span><span class="nx">handlebars</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">json</span><span class="o">:</span> <span class="p">{</span><span class="nx">pessoas</span><span class="o">:</span><span class="p">[{</span><span class="nx">nome</span><span class="o">:</span><span class="s1">&#39;italo&#39;</span><span class="p">},</span> <span class="p">{</span><span class="nx">nome</span><span class="o">:</span><span class="s1">&#39;queiroz&#39;</span><span class="p">}]},</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;caminho_do_template_handlebars.hb&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ou</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#element&#39;</span><span class="p">).</span><span class="nx">handlebars</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">json</span><span class="o">:</span> <span class="s1">&#39;caminho_do_json.json&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;caminho_do_template_handlebars.hb&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Caso queiram colaborar fiquem a vontade, segue o link do <a href="https://github.com/italoqueiroz/jHandlebars">GitHub</a> com um exemplo do uso.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando widget usando jQuery]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery/"/>
    <updated>2012-10-17T18:01:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery</id>
    <content type="html"><![CDATA[<p>Atualmente a moda é <span class="bobagem">namorar pelado</span> Widget&#8217;s, que são componentes de interface que fornecem uma funcionalidade específica. Acessando o site da jQueryUI encontrei este link
<a href="http://wiki.jqueryui.com/w/page/12138135/Widget%20factory">Widget Factory</a>.</p>

<p>Montei o exemplo a seguir tentando repassa o que consegui abstrair dos conceitos informados pela jQueryUI.</p>

<p>Primeiro iremos criar 2 arquivos <strong>index.html</strong>  e <strong>jquery.custom.list.js</strong></p>

<p>No <strong>index.html</strong> montaremos uma estrutura simples de html adicionando algumas chamadas para as libs da jQuery (v 1.8) e jQueryUI (v 1.9).</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en-US&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.8.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.0/jquery-ui.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery.custom.list.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">table</span> <span class="nt">td</span><span class="o">,</span> <span class="nt">table</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">padding</span><span class="o">:</span><span class="m">5px</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;demo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>O jquery.custom.list.js será o arquivo onde criaremos nosso widget.</p>

<figure class='code'><figcaption><span>jquery.custom.list.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">widget</span><span class="p">(</span><span class="s2">&quot;custom.list&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// default options</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;nome&#39;</span><span class="p">,</span> <span class="s1">&#39;idade&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">htmlTable</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Construtor</span>
</span><span class='line'>    <span class="nx">_create</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;construtor&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;custom-list&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Este método é chamada assim que for criado e quando for alterada as opções.</span>
</span><span class='line'>    <span class="nx">_refresh</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//verifica se foi informado os dados.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createTable</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createHeaderTable</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createBodyTable</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;custon-list-alert&quot;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span><span class="s2">&quot;Não existem registros&quot;</span><span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que cria a tabela</span>
</span><span class='line'>    <span class="nx">_createTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;table&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que cria o cabeçalho</span>
</span><span class='line'>    <span class="nx">_createHeaderTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">headerTable</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;thead&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">columns</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">column</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span><span class="nx">column</span><span class="p">,</span> <span class="kr">class</span><span class="o">:</span><span class="s1">&#39;ui-widget-header&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que monta o corpo da tabela com os dados passados.</span>
</span><span class='line'>    <span class="nx">_createBodyTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bodyTable</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tbody&gt;&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">columns</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">column</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">column</span><span class="p">]</span><span class="o">?</span><span class="nx">data</span><span class="p">[</span><span class="nx">column</span><span class="p">]</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">,</span> <span class="kr">class</span><span class="o">:</span><span class="s1">&#39;ui-state-default&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;tr:last-child&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Responsável por remover o plugin e fazer as limpezas necessárias.</span>
</span><span class='line'>    <span class="nx">_destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;custom-list&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Este método é chamado sempre que uma opção é alterada</span>
</span><span class='line'>    <span class="c1">// e toda vez que uma opção é alterada atualizamos nosso widget.</span>
</span><span class='line'>    <span class="nx">_setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// _super and _superApply continuam a manipulação correta dos argumentos passados.</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_superApply</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>No início do arquivo temos a chamada do $.widget que tem como primeiro parâmetro o namespace (custom) e nome (list) do seu plugin, caso  o namespace não exista a jQuery já criara a instância.<br />
O segundo parâmetro é o objeto widget de onde você deseja herdar, podendo este também ser um novo objeto.<br />
Terceiro parâmetro são as configurações que você deseja adicionar ou sobrescrever no widget herdado.</p>

<p>Como você pode perceber temos alguns métodos que iniciam com &#8220;&#95;&#8221; (underscore), este são métodos privados (por convenção) não podem ser acessados Ex: $(‘#demo’).list(‘&#95;create’)</p>

<p>São necessários a princípio as seguintes implementações:</p>

<h3>options: Com as opções default do seu widget.</h3>

<h3>_create: Que é o construtor do seu widget.</h3>

<h3>_destroy: Que é o seu lixeiro, assim que acionado ele remove o widget e você pode informar demais procedimentos para a “limpeza” do DOM.</h3>

<p>Adicionei meus métodos privados:<br />
&#95;refresh, &#95;createTable, &#95;createHeaderTable, &#95;createBodyTable.</p>

<p>E sobrescrevi o setOptions, pois sempre que for alterado meus options o widget será atualizado (&#95;refresh).</p>

<p>Abra o console do seu navegador e tente as seguintes instruções de cada vez:<br />
$(&#8216;#demo&#8217;).list(&#8216;option&#8217;, &#8216;columns&#8217;, [&#8216;nome&#8217;]);<br />
$(&#8216;#demo&#8217;).list(&#8216;option&#8217;, &#8216;data&#8217;, [{nome:&#8217;Nome de alguém&#8217;, idade:43}]);<br />
$(&#8216;#demo&#8217;).data(&#8216;list&#8217;)._refresh;<br />
$(&#8216;#demo&#8217;).list(&#8216;destroy&#8217;);<br /></p>

<p><a href="https://github.com/italoqueiroz/widgetExemplo">Link do código no GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atualizando o PHP no MAC OS]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/11/atualizando-o-php-no-mac-os/"/>
    <updated>2012-10-11T12:08:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/11/atualizando-o-php-no-mac-os</id>
    <content type="html"><![CDATA[<p>Manolada, quem tem MAC OS sabe muito bem que ele já vem com um PHP e Apache instalado, pronto para ser utilizado. Só que nem tudo são flores, porque a versão que vem instalada no OS é muito desatualizada com a ultima versão estável disponível.</p>

<p>E ai que vem a porrada. Como atualizar o PHP do MAC sem cuspir sangue?. Isso pode ser feito de 2 maneiras. Você pode usar gerenciadores de pacote ou simplesmente utilizar um comando no terminal e mais nada. <span class="bobagem">coisa linda d++++</span></p>

<figure class='code'><figcaption><span>Atualizar PHP  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">s</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">osx</span><span class="o">.</span><span class="n">liip</span><span class="o">.</span><span class="n">ch</span><span class="o">/</span><span class="n">install</span><span class="o">.</span><span class="n">sh</span> <span class="o">|</span> <span class="n">bash</span> <span class="o">-</span><span class="n">s</span> <span class="mi">5</span><span class="o">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simples assim, se tiverem dúvidas podem <a href="http://php-osx.liip.ch">acessar o site desta bagaça</a>.</p>

<p>Espero ter ajudado.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando templates com HandleBars]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars/"/>
    <updated>2012-10-09T17:05:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars</id>
    <content type="html"><![CDATA[<p>Se você querido “manolo” leitor que quando utiliza javascript se “amarra” em misturar lógica com string’s que geram seu html.</p>

<figure class='code'><figcaption><span>Html misturado com a lógica  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s2">&quot;&lt;div&gt;</span>
</span><span class='line'><span class="s2">             &lt;ul&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;1&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;2&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;3&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;4&lt;/li&gt;</span>
</span><span class='line'><span class="s2">             &lt;/ul&gt;</span>
</span><span class='line'><span class="s2">         &lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>  <span class="c1">//Bizarro :D eu sei        </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;span&gt; Coisa linda &lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#target&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>            
</span></code></pre></td></tr></table></div></figure>


<p>Venho então lhe propor uma solução que poderá mudar a sua vida de uma vez por todas. <span class="bobagem">(sei que isso foi bem tosco)</span></p>

<p>Desde que comecei a postar tenho falado sobre templates javascript e dentre eles sobre o HandleBars, então pensei em montar este tutorial com o foco apenas em conhecermos o template e como é simples sua implementação.</p>

<p>Começaremos criando uma estrutura de pasta conforme a imagem abaixo. <br />
<img class="center" src="http://italoqueiroz.github.com/images/criando_template_handlebars/estrutura.png" width="176"></p>

<p>Na nossa <strong>index.html</strong> criaremos um documento html padrão, adicionando algumas bibliotecas javascript (jQuery  e HandleBars) e com 2 div&#8217;s, uma com id <strong>table</strong> e outra com id <strong>div</strong>.</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en-US&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3&gt;</span>Template 1 - Table<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3&gt;</span>Template 2 - Div<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;div&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="c">&lt;!-- HandleBars Library--&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://cloud.github.com/downloads/wycats/handlebars.js/handlebars-1.0.rc.1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- jQuery Library--&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>E montaremos nossos 2 arquivos de template (table.hb e div.hb) com os seguintes códigos.</p>

<figure class='code'><figcaption><span>table.hb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nf">#tableComponent</span> <span class="nt">td</span><span class="p">{</span><span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="m">#000</span> <span class="k">solid</span><span class="p">;</span><span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">&#39;tableComponent&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{#each pessoas}}
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>{{nome}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>{{idade}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>div.hb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nc">.divComponent</span> <span class="nt">div</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">height</span><span class="o">:</span><span class="m">50px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">margin</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span><span class="m">#FFF</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span><span class="m">#A5BFDD</span><span class="p">;</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;divComponent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{#each pessoas}}
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      Nome: {{nome}}<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>      Idade: {{idade}}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como você deve ter notado, existem elementos que estão entre chaves duplas - { { nome } } – que são usadas sempre que quisermos imprimir o valor de um elemento. Caso estas chaves duplas venham referenciando um bloco de expressão - { { #each pessoas } } - é carregado este helper que pode ser um loop, uma formatação de impressão, condicionais - { { #if pessoas } } - e zas.</p>

<p><strong>**obs: Não existe este espaço entre as chaves como coloquei no texto acima, mas tive que fazer isso por limitação da minha ferramenta de gerenciamento de conteúdo.</strong></p>

<p>Logo abaixo temos o código javascript que faz toda a mágica de chamar nossos templates. Tentarei explicar da melhor forma possível :D. Lembrando que o javascript poderia ter sido bem melhor elaborado, com funções para gerenciar nossos templates, mas achei melhor deixar isso para outro post e não complicar mais as coisas!!!</p>

<figure class='code'><figcaption><span>JS que chama nossos templates</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/******************************************</span>
</span><span class='line'><span class="cm">  * Carregando o template &quot;table&quot;</span>
</span><span class='line'><span class="cm">  ******************************************/</span>
</span><span class='line'>  <span class="c1">//Variável reponsável por guardar o template de &quot;table&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//Carrega o template de &quot;table&quot;;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;table.hb&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">async</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">tableTemplate</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">//Dados que seram passados para o template.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;pessoas&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Pedro&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">23</span><span class="p">},{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Kleber&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">20</span><span class="p">},{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Marcos&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">31</span><span class="p">}]};</span>
</span><span class='line'>  <span class="c1">//Gera o html de acordo com o JSON passado.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableHtml</span> <span class="o">=</span> <span class="nx">tableTemplate</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Seta o html para a div#table, outra opção seria $(&#39;#table&#39;).html(tableTemplate(context));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#table&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">tableHtml</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/******************************************</span>
</span><span class='line'><span class="cm">  * Carregando o template &quot;div&quot;</span>
</span><span class='line'><span class="cm">  ******************************************/</span>
</span><span class='line'>  <span class="c1">//Variável reponsável por guardar o template de &quot;div&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">divTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//Carrega o template de &quot;table&quot;;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;div.hb&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">async</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">divTemplate</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">//Gera o html de acordo com o JSON passado (usaremos o mesmo que do template &quot;table&quot;).</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">divHtml</span> <span class="o">=</span> <span class="nx">divTemplate</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Seta o html para a div#div, outra opção seria $(&#39;#div&#39;).html(divTemplate(context));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#div&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">divHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resumidamente o que precisei fazer foi carregar meus arquivos .hb que poderiam ser qualquer outro tipo de extensão (Ex: table.html, table.italo, table.queiroz), o importante mesmo é o seu conteúdo.</p>

<p>Para carregar e obter o html dos meus templates utilizei a função <strong>$.ajax()</strong> (Linha 9  e linha 32). Após ter a string dos meus arquivos, compilo o mesmo para ser um template HandleBars (Linha 15 e linha 38).</p>

<p>Depois de feito isso é necessário passar um JSON (Linha 20) para o nosso template gerar o html (Linha 22 e linha 43) e logo depois adiciono o html gerado em nossas div&#8217;s para serem apresentadas no browser.</p>

<h2>Conclusão</h2>

<p>O uso de templates JS ajudam muito na criação e na manutenção de conteúdos dinâmicos, além de prover uma organização, separando as montagens de html da lógica do sistema. Caso seja necessário um designer poderá mexer apenas no arquivo do template para alterar a aparência sem necessariamente ter que editar um arquivo js.</p>

<p>Tentei explicar de forma bem simples o funcionamento do HandleBars, aconselho que você leia a <a href="http://handlebarsjs.com/">documentação</a> para saber o que mais esta engine de template js pode fazer&#8230;.</p>

<p>Segue o <a href="https://github.com/italoqueiroz/ExemploHandleBars">link</a> no GitHub para download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HandleBars ou EJS]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/06/handlebars-ou-ejs/"/>
    <updated>2012-10-06T11:00:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/06/handlebars-ou-ejs</id>
    <content type="html"><![CDATA[<p>Atualmente aqui no trabalho estamos definindo uma framework para o lado cliente (somente HTML e JS) que possa salvar nossas vidas, que seja “componetizada”, de fácil uso e acima de tudo tenha pouca dependência no layout utilizado na página (podendo usar <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, <a href="http://foundation.zurb.com/">Foundation</a>, <a href="http://960.gs/">960.gs</a> e zas).</p>

<figure class='code'><figcaption><span>PQP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{{</span><span class="nx">handlebars</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Inativando o cache  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Exemplo do site da engine HandleBars </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">source</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#entry-template&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;My New Post&quot;</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="s2">&quot;This is my first post!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">html</span>    <span class="o">=</span> <span class="nx">template</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Em meio a elaboração do projeto nos deparamos com a necessidade de utilizar um template JS, eu já tinha trabalhado com <a href="http://embeddedjs.com/">EJS</a> mas estava fortemente voltado ao <a href="http://handlebarsjs.com/">HandleBars</a> (culpa do <a href="http://italoqueiroz.github.com/blog/2012/10/04/meteor/">Meteor</a>), sendo assim, fui dar uma googlada e percebi que existiam dezenas de engines de template e que o <a href="https://www.linkedin.com/">LinkedIn</a> tinha feito um comparativo com várias opções para definir o que eles usariam na parte de view do site (<a href="http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">clique aqui</a> para ver os resultados).</p>

<p>Dentre as opções o HandleBars teve alguns elogios por parte da equipe do LinkedIn e por esse e outros motivos acabamos escolhendo-o. Mesmo sendo uma excelente engine e que também suporta templates do Mustache (que tem uma comunidade enorme) creio que testes de conceito sejam a melhor maneira de averiguar o que atende a sua necessida, assim como fez a equipe do LinkedIn.</p>

<p>Teve um ponto em específico levantado pela nossa equipe que me fizeram pensar 2 vezes antes de apoiar totalmente o HandleBars: “O CACHE”. No EJS para “cachear” um template é estupidamente simples pois já vem nativo já no HandleBars sua implementação é um pouco mais trabalhosa.</p>

<figure class='code'><figcaption><span>Inativando o cache  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Inativando o cache...</span>
</span><span class='line'><span class="nx">EJS</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="nx">cache</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mas creio que para saber como funciona esse lance de template JS a melhor opção seja o EJS, é mais tranquilo de trabalhar (com coisas simples), caso a idéia (como é a do nosso framework) seja mexer com vários componentes criando helpers e plugins aconselho o HandleBars por ter uma documentação mais vasta já que ele veio do Mustache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/04/meteor/"/>
    <updated>2012-10-04T20:09:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/04/meteor</id>
    <content type="html"><![CDATA[<p>Durante meu momentos de estudo me deparei com uma framework pra lá de curiosa, ela simplesmente prometia uma programação no lado servidor e no lado cliente usando somente Javascript e trabalhando de forma reativa: qualquer alteração realizada na página seria imediatamente populada em todos os outros clientes.</p>

<p>Até então não tinha acredito muito bem, e mesmo que possível, imaginei que fosse uma dificuldade imensa para configurar a máquina. Leigo engano logo após ver os vídeos de demonstração no site fiquei absurdamente surpreso. No momento de sua instalação não tive nenhum problema, sendo possível ainda baixar e rodar projetos demos.</p>

<p><a href="http://meteor.com">Meteor</a> tem um conjunto de pacotes que podem ser adicionados ao projeto. <br />
 Ex: <a href="http://www.mongodb.org/">mongoDB</a>, <a href="http://handlebarsjs.com/">HandleBars</a>, <a href="http://nodejs.org/">Node.js</a>, <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, entre outros&#8230;</p>

<p>Para entender melhor como funcionava montei um <a href="http://pt.wikipedia.org/wiki/Kanban">Kanban</a> <span class="bobagem">criei o repositório &#8220;kanbam&#8221; com  &#8220;m&#8221;, sorry</span> onde os usuários vão adicionando tarefas e movendo-as pelo quadro.</p>

<p>Segue o link do &#8221;<a href="https://github.com/italoqueiroz/kanbam">kanbam</a>&#8221; no GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog, GitHub Pages e suas malandragens]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/04/primeiro-post/"/>
    <updated>2012-10-04T00:55:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/04/primeiro-post</id>
    <content type="html"><![CDATA[<p>A uma semana atrás vi que era possível criar um blog hospedado pelo <a href="http://pages.github.com">GitHub Pages</a>
<span class='bobagem'>(sei que estou atrasado)</span> usando
<strong><a href="http://jekyllrb.com">Jekyll</a></strong> e
<strong><a href="http://octopress.org">Octopress</a></strong>.</p>

<p>Na tentativa o maior problema encontrado foi a atualização do Ruby para a versão 1.9.2, que após algumas &#8220;googladas&#8221; consegui resolver facilmente com <a href="https://rvm.io">RVM</a>,
<span class='bobagem'>mentira tive que atualizar o XCode e instalar umas extensões para linha de comando</span>.</p>

<p>Com este blog pretendo na medida do possível compartilhar alguns conhecimentos (e se você me conhece pessoalmente deve estar dizendo &#8220;quase nenhum&#8221;) e ferramentas que encontro em minhas pesquisas diárias&#8230;</p>
]]></content>
  </entry>
  
</feed>
