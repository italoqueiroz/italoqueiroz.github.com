<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Italo Queiroz]]></title>
  <link href="http://italoqueiroz.github.com/atom.xml" rel="self"/>
  <link href="http://italoqueiroz.github.com/"/>
  <updated>2012-10-23T15:35:06-02:00</updated>
  <id>http://italoqueiroz.github.com/</id>
  <author>
    <name><![CDATA[Italo Queiroz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Criando widget usando jQuery]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery/"/>
    <updated>2012-10-17T18:01:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/17/criando-widget-usando-jquery</id>
    <content type="html"><![CDATA[<p>Atualmente a moda é <span class="bobagem">namorar pelado</span> Widget&#8217;s, que são componentes de interface que fornecem uma funcionalidade específica. Acessando o site da jQueryUI encontrei este link
<a href="http://wiki.jqueryui.com/w/page/12138135/Widget%20factory">Widget Factory</a>.</p>

<p>Montei o exemplo a seguir tentando repassa o que consegui abstrair dos conceitos informados pela jQueryUI.</p>

<p>Primeiro iremos criar 2 arquivos <strong>index.html</strong>  e <strong>jquery.custom.list.js</strong></p>

<p>No <strong>index.html</strong> montaremos uma estrutura simples de html adicionando algumas chamadas para as libs da jQuery (v 1.8) e jQueryUI (v 1.9).</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en-US&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.8.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.0/jquery-ui.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery.custom.list.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">table</span> <span class="nt">td</span><span class="o">,</span> <span class="nt">table</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">padding</span><span class="o">:</span><span class="m">5px</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;demo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>O jquery.custom.list.js será o arquivo onde criaremos nosso widget.</p>

<figure class='code'><figcaption><span>jquery.custom.list.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">widget</span><span class="p">(</span><span class="s2">&quot;custom.list&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// default options</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>      <span class="nx">columns</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;nome&#39;</span><span class="p">,</span> <span class="s1">&#39;idade&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">htmlTable</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Construtor</span>
</span><span class='line'>    <span class="nx">_create</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;construtor&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;custom-list&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Este método é chamada assim que for criado e quando for alterada as opções.</span>
</span><span class='line'>    <span class="nx">_refresh</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//verifica se foi informado os dados.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createTable</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createHeaderTable</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_createBodyTable</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;custon-list-alert&quot;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span><span class="s2">&quot;Não existem registros&quot;</span><span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que cria a tabela</span>
</span><span class='line'>    <span class="nx">_createTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;table&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que cria o cabeçalho</span>
</span><span class='line'>    <span class="nx">_createHeaderTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">headerTable</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;thead&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">columns</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">column</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span><span class="nx">column</span><span class="p">,</span> <span class="kr">class</span><span class="o">:</span><span class="s1">&#39;ui-widget-header&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">headerTable</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Método privado que monta o corpo da tabela com os dados passados.</span>
</span><span class='line'>    <span class="nx">_createBodyTable</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bodyTable</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tbody&gt;&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">columns</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">column</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">column</span><span class="p">]</span><span class="o">?</span><span class="nx">data</span><span class="p">[</span><span class="nx">column</span><span class="p">]</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">,</span> <span class="kr">class</span><span class="o">:</span><span class="s1">&#39;ui-state-default&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;tr:last-child&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">bodyTable</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Responsável por remover o plugin e fazer as limpezas necessárias.</span>
</span><span class='line'>    <span class="nx">_destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;custom-list&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Este método é chamado sempre que uma opção é alterada</span>
</span><span class='line'>    <span class="c1">// e toda vez que uma opção é alterada atualizamos nosso widget.</span>
</span><span class='line'>    <span class="nx">_setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// _super and _superApply continuam a manipulação correta dos argumentos passados.</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_superApply</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>No início do arquivo temos a chamada do $.widget que tem como primeiro parâmetro o namespace (custom) e nome (list) do seu plugin, caso  o namespace não exista a jQuery já criara a instância.<br />
O segundo parâmetro é o objeto widget de onde você deseja herdar, podendo este também ser um novo objeto.<br />
Terceiro parâmetro são as configurações que você deseja adicionar ou sobrescrever no widget herdado.</p>

<p>Como você pode perceber temos alguns métodos que iniciam com &#8220;&#95;&#8221; (underscore), este são métodos privados (por convenção) não podem ser acessados Ex: $(‘#demo’).list(‘&#95;create’)</p>

<p>São necessários a princípio as seguintes implementações:</p>

<h3>options: Com as opções default do seu widget.</h3>

<h3>_create: Que é o construtor do seu widget.</h3>

<h3>_destroy: Que é o seu lixeiro, assim que acionado ele remove o widget e você pode informar demais procedimentos para a “limpeza” do DOM.</h3>

<p>Adicionei meus métodos privados:<br />
&#95;refresh, &#95;createTable, &#95;createHeaderTable, &#95;createBodyTable.</p>

<p>E sobrescrevi o setOptions, pois sempre que for alterado meus options o widget será atualizado (&#95;refresh).</p>

<p>Abra o console do seu navegador e tente as seguintes instruções de cada vez:<br />
$(&#8216;#demo&#8217;).list(&#8216;option&#8217;, &#8216;columns&#8217;, [&#8216;nome&#8217;]);<br />
$(&#8216;#demo&#8217;).list(&#8216;option&#8217;, &#8216;data&#8217;, [{nome:&#8217;Nome de alguém&#8217;, idade:43}]);<br />
$(&#8216;#demo&#8217;).data(&#8216;list&#8217;)._refresh;<br />
$(&#8216;#demo&#8217;).list(&#8216;destroy&#8217;);<br /></p>

<p><a href="https://github.com/italoqueiroz/widgetExemplo">Link do código no GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atualizando o PHP no MAC OS]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/11/atualizando-o-php-no-mac-os/"/>
    <updated>2012-10-11T12:08:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/11/atualizando-o-php-no-mac-os</id>
    <content type="html"><![CDATA[<p>Manolada, quem tem MAC OS sabe muito bem que ele já vem com um PHP e Apache instalado, pronto para ser utilizado. Só que nem tudo são flores, porque a versão que vem instalada no OS é muito desatualizada com a ultima versão estável disponível.</p>

<p>E ai que vem a porrada. Como atualizar o PHP do MAC sem cuspir sangue?. Isso pode ser feito de 2 maneiras. Você pode usar gerenciadores de pacote ou simplesmente utilizar um comando no terminal e mais nada. <span class="bobagem">coisa linda d++++</span></p>

<figure class='code'><figcaption><span>Atualizar PHP  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">s</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">php</span><span class="o">-</span><span class="n">osx</span><span class="o">.</span><span class="n">liip</span><span class="o">.</span><span class="n">ch</span><span class="o">/</span><span class="n">install</span><span class="o">.</span><span class="n">sh</span> <span class="o">|</span> <span class="n">bash</span> <span class="o">-</span><span class="n">s</span> <span class="mi">5</span><span class="o">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simples assim, se tiverem dúvidas podem <a href="http://php-osx.liip.ch">acessar o site desta bagaça</a>.</p>

<p>Espero ter ajudado.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando templates com HandleBars]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars/"/>
    <updated>2012-10-09T17:05:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/09/criando-templates-com-handlebars</id>
    <content type="html"><![CDATA[<p>Se você querido “manolo” leitor que quando utiliza javascript se “amarra” em misturar lógica com string’s que geram seu html.</p>

<figure class='code'><figcaption><span>Html misturado com a lógica  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s2">&quot;&lt;div&gt;</span>
</span><span class='line'><span class="s2">             &lt;ul&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;1&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;2&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;3&lt;/li&gt;</span>
</span><span class='line'><span class="s2">                 &lt;li&gt;4&lt;/li&gt;</span>
</span><span class='line'><span class="s2">             &lt;/ul&gt;</span>
</span><span class='line'><span class="s2">         &lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>  <span class="c1">//Bizarro :D eu sei        </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;span&gt; Coisa linda &lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#target&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>            
</span></code></pre></td></tr></table></div></figure>


<p>Venho então lhe propor uma solução que poderá mudar a sua vida de uma vez por todas. <span class="bobagem">(sei que isso foi bem tosco)</span></p>

<p>Desde que comecei a postar tenho falado sobre templates javascript e dentre eles sobre o HandleBars, então pensei em montar este tutorial com o foco apenas em conhecermos o template e como é simples sua implementação.</p>

<p>Começaremos criando uma estrutura de pasta conforme a imagem abaixo. <br />
<img class="center" src="http://italoqueiroz.github.com/images/criando_template_handlebars/estrutura.png" width="176"></p>

<p>Na nossa <strong>index.html</strong> criaremos um documento html padrão, adicionando algumas bibliotecas javascript (jQuery  e HandleBars) e com 2 div&#8217;s, uma com id <strong>table</strong> e outra com id <strong>div</strong>.</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en-US&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3&gt;</span>Template 1 - Table<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3&gt;</span>Template 2 - Div<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;div&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="c">&lt;!-- HandleBars Library--&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://cloud.github.com/downloads/wycats/handlebars.js/handlebars-1.0.rc.1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- jQuery Library--&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>E montaremos nossos 2 arquivos de template (table.hb e div.hb) com os seguintes códigos.</p>

<figure class='code'><figcaption><span>table.hb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nf">#tableComponent</span> <span class="nt">td</span><span class="p">{</span><span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="m">#000</span> <span class="k">solid</span><span class="p">;</span><span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">&#39;tableComponent&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{#each pessoas}}
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>{{nome}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>{{idade}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>div.hb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nc">.divComponent</span> <span class="nt">div</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">height</span><span class="o">:</span><span class="m">50px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">margin</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span><span class="m">#FFF</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span><span class="m">#A5BFDD</span><span class="p">;</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;divComponent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{#each pessoas}}
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      Nome: {{nome}}<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>      Idade: {{idade}}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como você deve ter notado, existem elementos que estão entre chaves duplas - { { nome } } – que são usadas sempre que quisermos imprimir o valor de um elemento. Caso estas chaves duplas venham referenciando um bloco de expressão - { { #each pessoas } } - é carregado este helper que pode ser um loop, uma formatação de impressão, condicionais - { { #if pessoas } } - e zas.</p>

<p><strong>**obs: Não existe este espaço entre as chaves como coloquei no texto acima, mas tive que fazer isso por limitação da minha ferramenta de gerenciamento de conteúdo.</strong></p>

<p>Logo abaixo temos o código javascript que faz toda a mágica de chamar nossos templates. Tentarei explicar da melhor forma possível :D. Lembrando que o javascript poderia ter sido bem melhor elaborado, com funções para gerenciar nossos templates, mas achei melhor deixar isso para outro post e não complicar mais as coisas!!!</p>

<figure class='code'><figcaption><span>JS que chama nossos templates</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/******************************************</span>
</span><span class='line'><span class="cm">  * Carregando o template &quot;table&quot;</span>
</span><span class='line'><span class="cm">  ******************************************/</span>
</span><span class='line'>  <span class="c1">//Variável reponsável por guardar o template de &quot;table&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//Carrega o template de &quot;table&quot;;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;table.hb&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">async</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">tableTemplate</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">//Dados que seram passados para o template.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;pessoas&quot;</span><span class="o">:</span><span class="p">[{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Pedro&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">23</span><span class="p">},{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Kleber&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">20</span><span class="p">},{</span><span class="s2">&quot;nome&quot;</span><span class="o">:</span><span class="s2">&quot;Marcos&quot;</span><span class="p">,</span><span class="s2">&quot;idade&quot;</span><span class="o">:</span><span class="mi">31</span><span class="p">}]};</span>
</span><span class='line'>  <span class="c1">//Gera o html de acordo com o JSON passado.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableHtml</span> <span class="o">=</span> <span class="nx">tableTemplate</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Seta o html para a div#table, outra opção seria $(&#39;#table&#39;).html(tableTemplate(context));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#table&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">tableHtml</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/******************************************</span>
</span><span class='line'><span class="cm">  * Carregando o template &quot;div&quot;</span>
</span><span class='line'><span class="cm">  ******************************************/</span>
</span><span class='line'>  <span class="c1">//Variável reponsável por guardar o template de &quot;div&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">divTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//Carrega o template de &quot;table&quot;;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;div.hb&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">async</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">divTemplate</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">//Gera o html de acordo com o JSON passado (usaremos o mesmo que do template &quot;table&quot;).</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">divHtml</span> <span class="o">=</span> <span class="nx">divTemplate</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Seta o html para a div#div, outra opção seria $(&#39;#div&#39;).html(divTemplate(context));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#div&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">divHtml</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resumidamente o que precisei fazer foi carregar meus arquivos .hb que poderiam ser qualquer outro tipo de extensão (Ex: table.html, table.italo, table.queiroz), o importante mesmo é o seu conteúdo.</p>

<p>Para carregar e obter o html dos meus templates utilizei a função <strong>$.ajax()</strong> (Linha 9  e linha 32). Após ter a string dos meus arquivos, compilo o mesmo para ser um template HandleBars (Linha 15 e linha 38).</p>

<p>Depois de feito isso é necessário passar um JSON (Linha 20) para o nosso template gerar o html (Linha 22 e linha 43) e logo depois adiciono o html gerado em nossas div&#8217;s para serem apresentadas no browser.</p>

<h2>Conclusão</h2>

<p>O uso de templates JS ajudam muito na criação e na manutenção de conteúdos dinâmicos, além de prover uma organização, separando as montagens de html da lógica do sistema. Caso seja necessário um designer poderá mexer apenas no arquivo do template para alterar a aparência sem necessariamente ter que editar um arquivo js.</p>

<p>Tentei explicar de forma bem simples o funcionamento do HandleBars, aconselho que você leia a <a href="http://handlebarsjs.com/">documentação</a> para saber o que mais esta engine de template js pode fazer&#8230;.</p>

<p>Segue o <a href="https://github.com/italoqueiroz/ExemploHandleBars">link</a> no GitHub para download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HandleBars ou EJS]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/06/handlebars-ou-ejs/"/>
    <updated>2012-10-06T11:00:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/06/handlebars-ou-ejs</id>
    <content type="html"><![CDATA[<p>Atualmente aqui no trabalho estamos definindo uma framework para o lado cliente (somente HTML e JS) que possa salvar nossas vidas, que seja “componetizada”, de fácil uso e acima de tudo tenha pouca dependência no layout utilizado na página (podendo usar <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, <a href="http://foundation.zurb.com/">Foundation</a>, <a href="http://960.gs/">960.gs</a> e zas).</p>

<figure class='code'><figcaption><span>PQP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{{</span><span class="nx">handlebars</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Inativando o cache  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Exemplo do site da engine HandleBars </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">source</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#entry-template&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;My New Post&quot;</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="s2">&quot;This is my first post!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">html</span>    <span class="o">=</span> <span class="nx">template</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Em meio a elaboração do projeto nos deparamos com a necessidade de utilizar um template JS, eu já tinha trabalhado com <a href="http://embeddedjs.com/">EJS</a> mas estava fortemente voltado ao <a href="http://handlebarsjs.com/">HandleBars</a> (culpa do <a href="http://italoqueiroz.github.com/blog/2012/10/04/meteor/">Meteor</a>), sendo assim, fui dar uma googlada e percebi que existiam dezenas de engines de template e que o <a href="https://www.linkedin.com/">LinkedIn</a> tinha feito um comparativo com várias opções para definir o que eles usariam na parte de view do site (<a href="http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">clique aqui</a> para ver os resultados).</p>

<p>Dentre as opções o HandleBars teve alguns elogios por parte da equipe do LinkedIn e por esse e outros motivos acabamos escolhendo-o. Mesmo sendo uma excelente engine e que também suporta templates do Mustache (que tem uma comunidade enorme) creio que testes de conceito sejam a melhor maneira de averiguar o que atende a sua necessida, assim como fez a equipe do LinkedIn.</p>

<p>Teve um ponto em específico levantado pela nossa equipe que me fizeram pensar 2 vezes antes de apoiar totalmente o HandleBars: “O CACHE”. No EJS para “cachear” um template é estupidamente simples pois já vem nativo já no HandleBars sua implementação é um pouco mais trabalhosa.</p>

<figure class='code'><figcaption><span>Inativando o cache  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Inativando o cache...</span>
</span><span class='line'><span class="nx">EJS</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span><span class="nx">cache</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mas creio que para saber como funciona esse lance de template JS a melhor opção seja o EJS, é mais tranquilo de trabalhar (com coisas simples), caso a idéia (como é a do nosso framework) seja mexer com vários componentes criando helpers e plugins aconselho o HandleBars por ter uma documentação mais vasta já que ele veio do Mustache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/04/meteor/"/>
    <updated>2012-10-04T20:09:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/04/meteor</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://italoqueiroz.github.com/images/meteor/meteor.png" width="246">
Durante meus momentos de estudo me deparei com uma framework pra lá de curiosa, ela simplesmente prometia uma programação no lado servidor e no lado cliente usando somente Javascript e trabalhando de forma reativa: qualquer alteração realizada na página seria imediatamente populada em todos os outros clientes.</p>

<p>Até então não tinha acredito muito bem, e mesmo que possível, imaginei que fosse uma dificuldade imensa para configurar a máquina. Leigo engano logo após ver os vídeos de demonstração no site fiquei absurdamente surpreso. No momento de sua instalação não tive nenhum problema, sendo possível ainda baixar e rodar projetos demos.</p>

<p><a href="http://meteor.com">Meteor</a> tem um conjunto de pacotes que podem ser adicionados ao projeto. <br />
 Ex: <a href="http://www.mongodb.org/">mongoDB</a>, <a href="http://handlebarsjs.com/">HandleBars</a>, <a href="http://nodejs.org/">Node.js</a>, <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>, entre outros&#8230;</p>

<p>Para entender melhor como funcionava montei um <a href="http://pt.wikipedia.org/wiki/Kanban">Kanban</a> <span class="bobagem">criei o repositório &#8220;kanbam&#8221; com  &#8220;m&#8221;, sorry</span> onde os usuários vão adicionando tarefas e movendo-as pelo quadro.</p>

<p>Segue o link do &#8221;<a href="https://github.com/italoqueiroz/kanbam">kanbam</a>&#8221; no GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog, GitHub Pages e suas malandragens]]></title>
    <link href="http://italoqueiroz.github.com/blog/2012/10/04/primeiro-post/"/>
    <updated>2012-10-04T00:55:00-03:00</updated>
    <id>http://italoqueiroz.github.com/blog/2012/10/04/primeiro-post</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://italoqueiroz.github.com/images/primeiro_post/githubpages.png">
A uma semana atrás vi que era possível criar um blog hospedado pelo <a href="http://pages.github.com">GitHub Pages</a>
<span class='bobagem'>(sei que estou atrasado)</span> usando
<strong><a href="http://jekyllrb.com">Jekyll</a></strong> e
<strong><a href="http://octopress.org">Octopress</a></strong>.</p>

<p><img class="left" src="http://italoqueiroz.github.com/images/primeiro_post/jekyll.png" width="200">
Na tentativa o maior problema encontrado foi a atualização do Ruby para a versão 1.9.2, que após algumas &#8220;googladas&#8221; consegui resolver facilmente com <a href="https://rvm.io">RVM</a>,
<span class='bobagem'>mentira tive que atualizar o XCode e instalar umas extensões para linha de comando</span>.</p>

<p><img class="right" src="http://italoqueiroz.github.com/images/primeiro_post/octopress.png" width="220">
Com este blog pretendo na medida do possível compartilhar alguns conhecimentos (e se você me conhece pessoalmente deve estar dizendo &#8220;quase nenhum&#8221;) e ferramentas que encontro em minhas pesquisas diárias&#8230;</p>
]]></content>
  </entry>
  
</feed>
